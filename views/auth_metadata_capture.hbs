<form id="dismissDirect" name="dismissDirect" action="/action?fp_cot={{connect_token}}" method="post">
    <input type="hidden" name="route" value="auth_metadata_capture" />
    <input type="hidden" name="action" value="DISMISS_DIRECT" />
</form>

<header class="pt-6 pb-3 px-6">
    <div class="w-40 flex items-center justify-center">
        <img src="{{provider.logo_url}}" alt="Logo" class="w-full h-full max-w-full max-h-full object-contain">
    </div>
</header>

<article class="p-0 h-full w-full flex flex-col flex-1 relative overflow-auto font-book text-[17px] font-light leading-6">
    <div id="loginForm" class="flex flex-col flex-1">
        <main class="main">
            <div class="main__wrapper">
                <div class="main__heading">
                    <h1 class="title">{{labels.connect_account_title}}</h1>
                </div>
                <p class="pl-0 pr-4 pb-12">
                    {{{interpolate labels.connect_account_description
                                   account_name=account.display_name
                                   privacy_policy_link=(interpolate labels.data_protection_policy_link privacy_url=account.privacy_url)
                    }}}
                </p>
                <form class="form" id="auth" action="/auth_metadata_capture?fp_cot={{connect_token}}" method="post">
                <fieldset class="fieldset">
                    <div class="text-field">
                        <input id="login-input" class="text-field__input" type="text" name="login" spellcheck="false" autocapitalize="none" placeholder="{{labels.login_placeholder}}" value="{{demoLogin}}">
                        <label for="login-input" class="text-field__label">{{labels.login_label}}</label>
                    </div>
                    <div class="text-field">
                        <input id="password-input" class="text-field__input" type="password" autocapitalize="off" spellcheck="false" name="password" placeholder="{{labels.password_placeholder}}" value="{{demoPassword}}">
                        <label for="password-input" class="text-field__label">{{labels.password_label}}</label>
                    </div>
                </fieldset>
                </form>
            </div>
        </main>
        <footer class="footer">
            <button id="submitControl" type="submit" form="auth" class="button--primary">
                {{labels.login_button}}
            </button>
            <button class="button--ghost" form="dismissDirect" type="submit">{{labels.set_tariff_manually_button}}</button>
        </footer>
    </div>
    <div id="countdownForm" class="flex-col flex-1 hidden">
        <main class="main flex flex-col flex-1">
            <div class="main__wrapper flex flex-col flex-1">
                <div class="main__heading">
                    <h1 class="title">{{{labels.wait_title}}}</h1>
                </div>
                <p class="pl-0 pr-4 pb-12">
                    {{{labels.wait_description}}}
                </p>

                <div class="flex justify-center items-center flex-1 py-4">
                    <div class="relative w-36 h-36 mb-6">
                        <svg class="w-full h-full transform rotate-[-90deg]" viewBox="0 0 150 150">
                            <circle
                                    class="text-black_a13"
                                    cx="75"
                                    cy="75"
                                    r="65"
                                    stroke-width="8"
                                    fill="none"
                                    stroke="currentColor"
                            ></circle>
                            <circle
                                    class="text-accent"
                                    cx="75"
                                    cy="75"
                                    r="65"
                                    stroke-width="8"
                                    fill="none"
                                    stroke-dasharray="408"
                                    stroke-dashoffset="0"
                                    stroke-linecap="round"
                                    stroke="currentColor"
                            ></circle>
                        </svg>
                        <div
                                id="countdown"
                                class="absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 inset-0 flex items-center justify-center text-3xl text-black_a60 font-bold"
                        >
                            60
                        </div>
                    </div>
                </div>
            </div>
        </main>
        <footer class="footer">
            <button class="button--primary" type="submit" form="dismissDirect">{{labels.set_tariff_manually_button}}</button>
        </footer>
    </div>
</article>


<script>
    document.addEventListener("DOMContentLoaded", function() {
        const form = document.getElementById("auth");
        const submitControl = document.getElementById("submitControl");
        form.addEventListener("submit", function(event) {
            submitControl.classList.add("animate-fade")
            submitControl.setAttribute("disabled", "disabled");

            const loginForm = document.getElementById("loginForm");
            const countdownForm = document.getElementById("countdownForm");

            loginForm.classList.add("hidden");
            countdownForm.classList.remove("hidden");
            countdownForm.classList.add("flex");

            const countdownElement = document.getElementById('countdown');
            const progressCircle = document.querySelector("circle:nth-child(2)");
            const circleRadius = 65;
            const circumference = 2 * Math.PI * circleRadius;
            const totalTime = 60;
            let timeLeft = totalTime;
            let countDownTimeout = null;
            progressCircle.style.strokeDasharray = circumference;
            progressCircle.style.strokeDashoffset = 0;

            function updateCountdown() {
                if (timeLeft > 0) {
                    timeLeft--;
                    countdownElement.textContent = timeLeft;
                    const progress = (timeLeft / totalTime) * circumference;
                    progressCircle.style.strokeDashoffset = circumference - progress;
                    countDownTimeout = setTimeout(updateCountdown, 1000);
                } else {
                    clearTimeout(countDownTimeout);
                    countdownElement.textContent = "--";
                    progressCircle.style.strokeDashoffset = circumference;
                }
            }
            updateCountdown();
        });
    });
</script>
